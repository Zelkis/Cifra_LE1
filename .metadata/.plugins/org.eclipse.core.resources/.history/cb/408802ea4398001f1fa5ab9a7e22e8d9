package Entities;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuebraCifraTransposicao {
	public static Map<String,Double> criaFrequencia(){
		//Cria um Map em que as chaves são os digramas e trigramas da língua portuguesa e os valores as suas respectivas frequências
		Map<String,Double> frequencias = new HashMap<String,Double>();
		frequencias.put("de", 0.034);
        frequencias.put("es", 0.027);
        frequencias.put("do", 0.021);
        frequencias.put("da", 0.019);
        frequencias.put("os", 0.017);
        frequencias.put("em", 0.016);
        frequencias.put("se", 0.015);
        frequencias.put("as", 0.013);
        frequencias.put("ou", 0.012);
        frequencias.put("ar", 0.011);
        frequencias.put("ra", 0.010);
        frequencias.put("re", 0.010);
        frequencias.put("er", 0.009);
        frequencias.put("to", 0.009);
        frequencias.put("me", 0.008);
        frequencias.put("an", 0.008);
        frequencias.put("te", 0.008);
        frequencias.put("co", 0.007);
        frequencias.put("na", 0.007);
        frequencias.put("di", 0.006);
        frequencias.put("qu", 0.006);
        frequencias.put("la", 0.005);
        frequencias.put("in", 0.005);
        frequencias.put("no", 0.005);
        frequencias.put("po", 0.004);
        frequencias.put("pe", 0.004);
        frequencias.put("pa", 0.004);
        frequencias.put("al", 0.004);
        frequencias.put("so", 0.004);
        frequencias.put("sa", 0.004);
        frequencias.put("ai", 0.003);
        frequencias.put("ve", 0.003);
        frequencias.put("ma", 0.003);
        frequencias.put("li", 0.003);
        frequencias.put("ba", 0.003);
        frequencias.put("te", 0.003);
        frequencias.put("ga", 0.003);
        frequencias.put("le", 0.003);
        frequencias.put("va", 0.003);
        frequencias.put("um", 0.003);
        frequencias.put("go", 0.002);
        frequencias.put("fa", 0.002);
        frequencias.put("fi", 0.002);
        frequencias.put("si", 0.002);
        frequencias.put("de", 0.002);

		
		return frequencias;
		
	}
	
	// Primeiro metódo de tentativa de quebra da msg
	public static String quebraCifra(String msg) {
		// Cria uma lista de Strings
		List<String> lista_permutacoes = new ArrayList<String>();
		// Pega o menor valor de um tipo double
		Double valor = Double.MIN_VALUE;
		// Cria uma String vazia
		String cifra="";
		// Gerar todas as permutações da mensagem passada no argumento e as armazenar na lista_permutacoes
		PermutacoesPalavra.gerarPermutacoes("",msg,lista_permutacoes);
		// Itera sobre a lista_permutacoes
		for(String per: lista_permutacoes) {
			// Calcula a pontuacao de cada String da lista
			Double pontuacao= calculaPontuacao(per);
			// Se essa pontuação for mairo que o valor atribui o valor a pontuação e a cifra a string permutada
			if(pontuacao > valor) {
				valor = pontuacao;
				cifra = per;
			}
			
		}
		// Retorna a cifra
		return cifra;
		
		
	}
	// Metódo para calcular a pontuação da mensagem
	public static Double calculaPontuacao(String msg) {
		// Cria uma lista de strings com os caracteres da mensagem
		List<String> lista_caracteres = new ArrayList<String>(Arrays.asList(msg.split("")));
		// Cria um Map de acordo com o metódo no início da classe
		Map<String,Double> frequencias = criaFrequencia();
		// Cria uma String vazia
		String aux ="";
		// Cria um Double vazio
		Double pontuacao = 0.0;
		// Itera sobre a lista de caracteres
		for(int i = 0; i<lista_caracteres.size();i++) {
			// se a soma do valor atual da iteração + 1 for maior do que o tamanho da lista-1 a variável aux recebe a soma dos elementos
			// Pegados pelo índice de acordo com a equação abaixo
			if (i+1 > lista_caracteres.size()-1) {
				 aux = lista_caracteres.get(i-2) + lista_caracteres.get(i-1) + lista_caracteres.get(i);
				 // Verifica se o trigrama existe no Map
				 if(frequencias.get(aux) != null) {
					 // Se existir adiciona a pontuacao a frequencia e quebra o looping
				pontuacao+=frequencias.get(aux);}
				 break;
			} 
			// Se a soma do valor atual da iteração + 2 for maior do que o tamanho da lista-1 a variável aux recebe a soma dos elementos
			// pegados pelo índice de acordo com a equação abaixo
			else if(i+2 > lista_caracteres.size()-1) {
				 aux = lista_caracteres.get(i-1) + lista_caracteres.get(i) + lista_caracteres.get(i+1);
				 // Verifica se o trigrama existe no Map
				 if(frequencias.get(aux) != null) {
					 // Se existir adicioana a variável pontuacao a frequencia quebra o looping
				 pontuacao+= frequencias.get(aux);}
				 break;
			}else {
				// Se não ocorrer nenhum dos casos acima então os trigramas serão obtidos de acordo com a equação abaixo
				aux = lista_caracteres.get(i) + lista_caracteres.get(i+1) + lista_caracteres.get(i+2);
				// Verifica se o trigrama existe no Map
				if(frequencias.get(aux) != null) {
					// Se existir adiciona a variável pontuacao a frequencia
				pontuacao+=frequencias.get(aux);}
			}
		}
		// Itera sobre a lista_caracteres
		for(int i = 0; i< lista_caracteres.size();i++) {
			// Se a soma do valor atual +1 for menor que o tamanho da lista-1 então a variável aux recebe a soma dos elementos String 
			// pegos pelo índice de acordo com a equação abaixo
			if(i+1 > lista_caracteres.size()-1) {
				aux = lista_caracteres.get(i-1) + lista_caracteres.get(i);
				// Verfica se o digrama existe no Map
				if(frequencias.get(aux)!= null) {
					// Adiciona a variável pontuacao a respectiva frequencia e quebra o looping
					pontuacao+=frequencias.get(aux);
				} break;
				}
				else {
					// Se não for a opção acima a variável aux recebe a soma de Strings pegas pelo índice de acordo com a equação abaixo
					aux = lista_caracteres.get(i) + lista_caracteres.get(i+1);
					// Verfica se o digrama existe no Map
					if(frequencias.get(aux)!= null) {
						// Se existir adiciona a variável pontuacao sua respectiva frequência
						pontuacao+=frequencias.get(aux);
					}
				}
			}
		// Retorna a pontuação
		
		return pontuacao;
	}
	public static String quebraCifra2(String msg,Integer key) {
		List<String> lista_caracteres_msg = new ArrayList<String>(Arrays.asList(msg.split("")));
		String stringDecifrada = "";
		Double valor = Double.MIN_VALUE;
		List<List<String>> listaCaracteres = new ArrayList<List<String>>();
		List<String> caracteres = new ArrayList<String>();
		for(String ch: lista_caracteres_msg) {
			if(caracteres.size() < Integer.valueOf(msg.length()/key)) {
				caracteres.add(ch);
		
			}else {
				List<String> caracteresCopia = new ArrayList<String>(caracteres);
				caracteres.clear();
				listaCaracteres.add(caracteresCopia);
				caracteres.add(ch);
				}
			}
		listaCaracteres.add(caracteres);
		String numeros ="";
		for(int j = 0; j< key;j++) {
			numeros+=String.valueOf(j);
					
			}
		List<String> lista_permutacoes = new ArrayList<String>();
		PermutacoesPalavra.gerarPermutacoes("", numeros, lista_permutacoes);
		for(String per: lista_permutacoes) {
			String tentativa = "";
			int cont = 0 ;
			while (tentativa.length()!=msg.length()) {
				for(char c: per.toCharArray()) {
					tentativa+=listaCaracteres.get(Integer.valueOf(String.valueOf(c))).get(cont);
				}
				cont++;
			
			}
			Double pontuacao = calculaPontuacao(tentativa);
			if(pontuacao> valor) {
				valor = pontuacao;
				stringDecifrada = tentativa;
			}
			
		}
		
		return stringDecifrada;
	
	}


}

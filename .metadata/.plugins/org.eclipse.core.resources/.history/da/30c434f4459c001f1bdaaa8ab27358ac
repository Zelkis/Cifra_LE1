package Entities;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuebraCifraTransposicao {
	public static Map<String,Double> criaFrequencia(){
		//Cria um Map em que as chaves são os digramas e trigramas da língua portuguesa e os valores as suas respectivas frequências
		Map<String,Double> frequencias = new HashMap<String,Double>();
		frequencias.put("qu", 1.04);
        frequencias.put("ch", 0.94);
        frequencias.put("lh", 0.76);
        frequencias.put("nh", 0.61);
        frequencias.put("ss", 0.70);
        frequencias.put("rr", 0.56);
        frequencias.put("gu", 0.32);
        frequencias.put("sc", 0.11);
        frequencias.put("xc", 0.10);
        frequencias.put("pr", 0.28);
        frequencias.put("tr", 0.26);
        frequencias.put("cr", 0.25);
        frequencias.put("fr", 0.14);
        frequencias.put("br", 0.22);
        frequencias.put("gr", 0.21);
        frequencias.put("cl", 0.17);
        frequencias.put("pl", 0.13);
        frequencias.put("bl", 0.11);
        frequencias.put("fl", 0.10);
        frequencias.put("sl", 0.05);
        frequencias.put("dr", 0.07);
        frequencias.put("vr", 0.02);
        frequencias.put("sr", 0.01);
        frequencias.put("pt", 0.06);
        frequencias.put("ct", 0.08);
        frequencias.put("pc", 0.04);
        frequencias.put("ps", 0.03);
        frequencias.put("gn", 0.02);
        frequencias.put("rm", 0.09);
        frequencias.put("ns", 0.15);
        frequencias.put("rs", 0.12);
        frequencias.put("sm", 0.04);
        frequencias.put("mn", 0.02);
        frequencias.put("rt", 0.07);
        frequencias.put("rp", 0.05);
        frequencias.put("nt", 0.18);
        frequencias.put("ml", 0.02);
        frequencias.put("rn", 0.06);
        frequencias.put("lc", 0.03);
        frequencias.put("lm", 0.04);
        frequencias.put("lg", 0.03);
        frequencias.put("nl", 0.02);
        frequencias.put("cc", 0.07);
        frequencias.put("mm", 0.06);
        frequencias.put("oo", 0.02);
        frequencias.put("pp", 0.04);
        frequencias.put("bb", 0.01);
        frequencias.put("gg", 0.01);
        frequencias.put("zz", 0.01);
        frequencias.put("aa", 0.04);
        frequencias.put("ec", 0.10);
        frequencias.put("ab", 0.12);
        frequencias.put("ad", 0.13);
        frequencias.put("ap", 0.09);
        frequencias.put("ob", 0.06);
        frequencias.put("oc", 0.11);
        frequencias.put("op", 0.08);
        frequencias.put("ov", 0.10);
        frequencias.put("os", 0.18);
        frequencias.put("er", 0.30);
        frequencias.put("el", 0.24);
        frequencias.put("em", 0.28);
        frequencias.put("re", 0.33);
        frequencias.put("ce", 0.22);
        frequencias.put("ac", 0.16);
        frequencias.put("as", 0.29);
        frequencias.put("ir", 0.20);
        frequencias.put("im", 0.19);
        frequencias.put("ar", 0.27);
        frequencias.put("ur", 0.14);
        frequencias.put("um", 0.18);
        frequencias.put("es", 0.31);
        frequencias.put("un", 0.14);
        frequencias.put("in", 0.21);
        frequencias.put("or", 0.26);
        frequencias.put("en", 0.23);
        frequencias.put("ex", 0.07);
        frequencias.put("an", 0.25);
        frequencias.put("iv", 0.11);
        frequencias.put("id", 0.15);
        frequencias.put("ig", 0.13);
        frequencias.put("ov", 0.10);
        frequencias.put("ca", 0.20);
        frequencias.put("co", 0.24);
        frequencias.put("di", 0.22);
        frequencias.put("ma", 0.21);
        frequencias.put("mo", 0.17);
        frequencias.put("pa", 0.23);
        frequencias.put("ta", 0.25);
        frequencias.put("sa", 0.22);
        frequencias.put("na", 0.24);
        frequencias.put("ra", 0.27);
        frequencias.put("al", 0.29);
        frequencias.put("do", 0.26);
        frequencias.put("te", 0.31);
        frequencias.put("me", 0.25);
        frequencias.put("la", 0.24);
        frequencias.put("bo", 0.08);
        frequencias.put("lo", 0.22);
        frequencias.put("so", 0.17);
        frequencias.put("av", 0.19);
        frequencias.put("vi", 0.15);
        frequencias.put("ro", 0.29);
        frequencias.put("is", 0.13);
        frequencias.put("ai", 0.10);
        frequencias.put("ve", 0.20);
        frequencias.put("vo", 0.09);
        frequencias.put("us", 0.11);
        frequencias.put("os", 0.28);
        frequencias.put("ua", 0.15);
        frequencias.put("il", 0.12);
        frequencias.put("ol", 0.16);
        frequencias.put("te", 0.27);
        frequencias.put("mi", 0.18);
        frequencias.put("ho", 0.13);
        frequencias.put("ra", 0.26);
        frequencias.put("to", 0.28);
        frequencias.put("pe", 0.14);
        frequencias.put("ei", 0.12);
        frequencias.put("de", 0.33);
        frequencias.put("ce", 0.18);
        frequencias.put("fo", 0.14);
        frequencias.put("ga", 0.08);
		
		return frequencias;
		
	}
	
	// Primeiro metódo de tentativa de quebra da msg
	public static String quebraCifra(String msg) {
		// Cria uma lista de Strings
		List<String> lista_permutacoes = new ArrayList<String>();
		// Pega o menor valor de um tipo double
		Double valor = Double.MIN_VALUE;
		// Cria uma String vazia
		String cifra="";
		// Gerar todas as permutações da mensagem passada no argumento e as armazenar na lista_permutacoes
		PermutacoesPalavra.gerarPermutacoes("",msg,lista_permutacoes);
		// Itera sobre a lista_permutacoes
		for(String per: lista_permutacoes) {
			// Calcula a pontuacao de cada String da lista
			Double pontuacao= calculaPontuacao(per);
			// Se essa pontuação for mairo que o valor atribui o valor a pontuação e a cifra a string permutada
			if(pontuacao > valor) {
				valor = pontuacao;
				cifra = per;
			}
			
		}
		// Retorna a cifra
		return cifra;
		
		
	}
	// Metódo para calcular a pontuação da mensagem
	public static Double calculaPontuacao(String msg) {
		// Cria uma lista de strings com os caracteres da mensagem
		List<String> lista_caracteres = new ArrayList<String>(Arrays.asList(msg.split("")));
		// Cria um Map de acordo com o metódo no início da classe
		Map<String,Double> frequencias = criaFrequencia();
		// Cria uma String vazia
		String aux ="";
		// Cria um Double vazio
		Double pontuacao = 0.0;
		// Itera sobre a lista de caracteres
		for(int i = 0; i<lista_caracteres.size();i++) {
			// se a soma do valor atual da iteração + 1 for maior do que o tamanho da lista-1 a variável aux recebe a soma dos elementos
			// Pegados pelo índice de acordo com a equação abaixo
			if (i+1 > lista_caracteres.size()-1) {
				 aux = lista_caracteres.get(i-2) + lista_caracteres.get(i-1) + lista_caracteres.get(i);
				 // Verifica se o trigrama existe no Map
				 if(frequencias.get(aux) != null) {
					 // Se existir adiciona a pontuacao a frequencia e quebra o looping
				pontuacao+=frequencias.get(aux);}
				 break;
			} 
			// Se a soma do valor atual da iteração + 2 for maior do que o tamanho da lista-1 a variável aux recebe a soma dos elementos
			// pegados pelo índice de acordo com a equação abaixo
			else if(i+2 > lista_caracteres.size()-1) {
				 aux = lista_caracteres.get(i-1) + lista_caracteres.get(i) + lista_caracteres.get(i+1);
				 // Verifica se o trigrama existe no Map
				 if(frequencias.get(aux) != null) {
					 // Se existir adicioana a variável pontuacao a frequencia quebra o looping
				 pontuacao+= frequencias.get(aux);}
				 break;
			}else {
				// Se não ocorrer nenhum dos casos acima então os trigramas serão obtidos de acordo com a equação abaixo
				aux = lista_caracteres.get(i) + lista_caracteres.get(i+1) + lista_caracteres.get(i+2);
				// Verifica se o trigrama existe no Map
				if(frequencias.get(aux) != null) {
					// Se existir adiciona a variável pontuacao a frequencia
				pontuacao+=frequencias.get(aux);}
			}
		}
		// Itera sobre a lista_caracteres
		for(int i = 0; i< lista_caracteres.size();i++) {
			// Se a soma do valor atual +1 for menor que o tamanho da lista-1 então a variável aux recebe a soma dos elementos String 
			// pegos pelo índice de acordo com a equação abaixo
			if(i+1 > lista_caracteres.size()-1) {
				aux = lista_caracteres.get(i-1) + lista_caracteres.get(i);
				// Verfica se o digrama existe no Map
				if(frequencias.get(aux)!= null) {
					// Adiciona a variável pontuacao a respectiva frequencia e quebra o looping
					pontuacao+=frequencias.get(aux);
				} break;
				}
				else {
					// Se não for a opção acima a variável aux recebe a soma de Strings pegas pelo índice de acordo com a equação abaixo
					aux = lista_caracteres.get(i) + lista_caracteres.get(i+1);
					// Verfica se o digrama existe no Map
					if(frequencias.get(aux)!= null) {
						// Se existir adiciona a variável pontuacao sua respectiva frequência
						pontuacao+=frequencias.get(aux);
					}
				}
			}
		// Retorna a pontuação
		
		return pontuacao;
	}
	// Outro metódo para quebrar a cifra por transposição que usa além da mensagem cifrada, uma estimativa do tamanho da chave
	public static String quebraCifra2(String msg,Integer keyLenght) {
		// Cria uma lista com os caracteres da mensagem
		List<String> lista_caracteres_msg = new ArrayList<String>(Arrays.asList(msg.split("")));
		// String vazia que retornará a mensagem decifrada
		String stringDecifrada = "";
		// Cria um valor minímo 
		Double valor = Double.MIN_VALUE;
		// Cria uma lista de listas para armazenar as colunas
		List<List<String>> listaCaracteres = new ArrayList<List<String>>();
		// Cria uma lista de Strings
		List<String> caracteres = new ArrayList<String>();
		// Itera sobre os caracteres da mensagem
		for(String ch: lista_caracteres_msg) {
			// Pega as colunas da mensagem transposta. A divisão do tamanho da mensagem pela chave dá o tamanho de cada coluna
			if(caracteres.size() < Integer.valueOf(msg.length()/keyLenght)) {
				caracteres.add(ch);
		
			}else {
				// Cria uma copia da lista das colunas
				List<String> caracteresCopia = new ArrayList<String>(caracteres);
				caracteres.clear();
				// Adiciona na lista de colunas
				listaCaracteres.add(caracteresCopia);
				// Adiciona o primeiro caracter
				caracteres.add(ch);
				}
			}
		// Adiciona eventuais colunas que não foram adicionadas na iteração acima
		listaCaracteres.add(caracteres);
		String numeros ="";
		// Cria uma String para numerar as colunas de 0 até o tamanho da chave
		for(int j = 0; j< keyLenght;j++) {
			numeros+=String.valueOf(j);
					
			}
		//Cria uma lista de strings que conterá todas as permutações possíveis das colunas
		List<String> lista_permutacoes = new ArrayList<String>();
		// Preenche a lista com essas permutações
		PermutacoesPalavra.gerarPermutacoes("", numeros, lista_permutacoes);
		// Itera sobre a lista de permutações
		for(String per: lista_permutacoes) {
			// Cria uma string de tentativa
			String tentativa = "";
			int cont = 0 ;
			// Enquanto a tentativa não tiver o tamanho da mensagem pega-se os caracteres do array de acordo com a ordem da permutação
			// Por exemplo para a combinação 012 supondo a lista [[s,d,s],[d,j,h],[i,o,p]] pega-se primeiro o caracter s, depois o j, depois i
			// depois pega-se o d, j e depois o o e assim por diante. Ao final teremos uma das possibilidades possíveis de transposição
			while (tentativa.length()!=msg.length()) {
				for(char c: per.toCharArray()) {
					tentativa+=listaCaracteres.get(Integer.valueOf(String.valueOf(c))).get(cont);
				}
				cont++;
			
			}
			// Calcula-se a pontuacao da tentativa usando a distribuição de frequencias da língua portuguesa
			Double pontuacao = calculaPontuacao(tentativa);
			if(pontuacao> valor) {
				valor = pontuacao;
				stringDecifrada = tentativa;
			}
			
		}
		// Retorna a mensagem decifrada
		return stringDecifrada;
	
	}


}
